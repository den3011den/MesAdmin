@page "/RPM/ResourceManagement"

@inject IJSRuntime _jsRuntime

@*@inject IProcessResourcesRepository _processResourcesRepository
@inject IEquipmentRepository _equipmentRepository
@inject NavigationManager _navigationManager
*@

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

<PageTitle>RPM.ResourceManagement</PageTitle>

<h3>ResourceManagement</h3>

<div class="row">
    <button class="btn btn-success" @onclick="ToastrSuccess">Тест Toastr Успех</button>
    <button class="btn btn-danger" @onclick="ToastrError">Тест Toastr Ошибка</button>
</div>

<br />

<div class="row">
    <button class="btn btn-success" @onclick="SweetAlertSuccess">Тест SweetAlert Успех</button>
    <button class="btn btn-danger" @onclick="SweetAlertError">Тест SweetAlert Ошибка</button>
</div>

@*<button class="btn btn-danger" @onclick="()=>HandleDelete(objCat.ParentId, objCat.InsideId)">Удалить</button>*@


@if (IsLoading)
{

    //отображение gif загрузки
    <div class="text-center">
        <img src="/images/loading.gif">
    </div>

}
else
{
    //нет записей
    <p>Записей не найдено</p>
}


@code {
    public bool IsLoading { get; set; }
    private string DeleteInsideId { get; set; } = 0;
    private string DeleteParentId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            /*здесь получаем данные списка ресурсов */
            /* await LoadCategories(); */
        }
    }

    private async Task LoadAllProcessResources()
    {
        /* загурка данных */
        /* IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged(); */
    }

    private async Task ToastrSuccess()
    {
        await _jsRuntime.ToastrSuccess("Операция выполнена успешно");
    }

    private async Task ToastrError()
    {
        await _jsRuntime.ToastrError("При выполнении операции произошла ошибка");
    }

    private async Task SweetAlertSuccess()
    {
        await _jsRuntime.InvokeVoidAsync("ShowSwal", "success", "Задача выполнена успешно");
    }

    private async Task SweetAlertError()
    {
        await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Ошибка при выполнении задачи");
    }




    private void HandleDelete(string parentId, string insideId)
    {
        DeleteInsideId = insideId;
        DeleteParentId = parentId;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        // здесь код удаления
        /* if (isConfirmed && DeleteCategoryId != 0)
         {
             await Task.Delay(5000);
             //delete
             await _categoryRepository.Delete(DeleteCategoryId);
             await LoadCategories();
             await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
         } */
        IsLoading = false;
    }


}
