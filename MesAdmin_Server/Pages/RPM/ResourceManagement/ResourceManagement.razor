@page "/RPM/ResourceManagement"

@using MesAdmin_Models.ResourceManagementModels

@inject IJSRuntime _jsRuntime

@inject IProcessResourcesRepository _processResourcesRepository
@inject IEquipmentRepository _equipmentRepository
@inject IProcessResourcesVMRepository _processResourcesVMRepository

@inject NavigationManager _navigationManager

@inject DialogService _dialogService

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" DeleteConfirmationMessage="@DeleteMessage" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

<PageTitle>RPM.ResourceManagement</PageTitle>


<div class="row mt-4">

    <div class="col-6">
        <h4 class="card-title text-primary">ResourceManagement</h4>
    </div>


    @*----------------------------------------------------- *@


    @if (processResourcesVMDTOList.Count() > 0)
    {

        <div class="row cols-6">
            <a @onclick="AddResource" class="btn btn-primary form-control">+ Добавить новый ресурс</a>
            @*<RadzenButton Icon="add_circle_outline" class="btn btn-primary form-control" Text="+ Добавить новый ресурс" Click="@AddResource"/>*@
        </div>
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Simple" AllowSorting="true" AllowMultiColumnSorting="false" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="processResourcesVMDTOList" TItem="ProcessResourcesVMDTO" LogicalFilterOperator="LogicalFilterOperator.Or"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    ShowMultiColumnSortingIndex="false" style="height: 750px"
                    RowDoubleClick="@EditResource">

            <Columns>
                <RadzenDataGridColumn TItem="ProcessResourcesVMDTO" Title="" Sortable="false" Width="60px" Filterable="false">
                    <Template Context="data">
                        <div class="container">
                            <RadzenIcon Icon="delete_forever" title=@($"Удалить ресурс {data.ProcessResources.InsideId} | {data.ProcessResources.ParentId}") style="font-size:18px;cursor: pointer;"
                                    @onclick="()=>HandleDelete(data.ProcessResources.ParentId, data.ProcessResources.InsideId)"></RadzenIcon>
                        </div>
                    </Template>
                </RadzenDataGridColumn>


                <RadzenDataGridColumn TItem="ProcessResourcesVMDTO" Property="ProcessResources.InsideId" Title="Код ресурса" Width="100px" />
                <RadzenDataGridColumn TItem="ProcessResourcesVMDTO" Property="ProcessResources.ParentId" Title="Код склада" Width="100px" />
                <RadzenDataGridColumn TItem="ProcessResourcesVMDTO" Property="ProcessResources.ResourceName" Title="Наименование ресурса" Width="240px" />
                <RadzenDataGridColumn TItem="ProcessResourcesVMDTO" Property="ProcessResources.Description" Title="Описание" Width="240px" />
                <RadzenDataGridColumn TItem="ProcessResourcesVMDTO" Property="ProcessResources.IsStorage" Title="Склад" Filterable="false" Width="70px">
                    <Template Context="data">
                        <RadzenCheckBox @bind-Value=data.ProcessResources.IsStorage Disabled="true" TriState="true" TValue="bool" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProcessResourcesVMDTO" Property="ProcessResources.IsProduction" Title="Произв" Filterable="false" Width="80px">
                    <Template Context="data">
                        <RadzenCheckBox @bind-Value=data.ProcessResources.IsProduction Disabled="true" TriState="true" TValue="bool" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProcessResourcesVMDTO" Title="Оборудование Proficy" Property="ProcessResources.EquipmentsString" Width="380px" Filterable="false" Sortable="false">
                    <Template Context="data">
                        <div class="container">
                            <button title=@($"Добавить оборудование Proficy ресурсу {data.ProcessResources.InsideId} | {data.ProcessResources.ParentId}") class="btn btn-primary" style="width: 90%; padding: 0; overflow: hidden; font-size:14px" @onclick="()=>HandleAddEquipment(data.ProcessResources.ParentId, data.ProcessResources.InsideId)"> +  Добавить оборудование </button>
                        </div>
                        <RadzenDataList WrapItems="false" AllowPaging="true" Data="data.Equipments" TItem="EquipmentDTO" PagerHorizontalAlign="HorizontalAlign.Left" PageSize="5" ShowPagingSummary="false">
                            <Template Context="data2">
                                <RadzenCard Style="width: 100%; padding: 0; overflow: hidden;">
                                    <div class="container">
                                        <div class="row">
                                            <div class="col-lg-0 p-0" style="width: 10%; cursor: pointer;">
                                                <RadzenIcon Icon="delete_forever" @onclick="()=>HandleDeleteEquipment(data.ProcessResources.ParentId, data.ProcessResources.InsideId, data2.EquipmentId, data2.S95Id)" title=@($"Удалить оборудование Proficy из ресурса {data.ProcessResources.InsideId} | {data.ProcessResources.ParentId}") />
                                            </div>
                                            @*<button title="Удалить оборудование Proficy из ресурса SAP" class="btn btn-danger" style="width: 20px; font-size:10px" @onclick="()=>HandleDeleteEquipment(data.ProcessResources.ParentId, data.ProcessResources.InsideId, data2.EquipmentId)"></button>*@
                                            <div class="col-lg-0 p-0" style="width: 70%;">
                                                @(data2.S95Id)
                                            </div>
                                        </div>
                                    </div>
                                </RadzenCard>
                            </Template>
                        </RadzenDataList>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        <p>* Двойной клик - редактировать запись</p>
    }
    else
    {
        if (IsLoading)
        {
            //отображение gif загрузки
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>

        }
    }
</div>



@*----------------------------------------------------*@
@*<div class="row">
    <button class="btn btn-success" @onclick="ToastrSuccess">Тест Toastr Успех</button>
    <button class="btn btn-danger" @onclick="ToastrError">Тест Toastr Ошибка</button>
</div>

<br />

<div class="row">
    <button class="btn btn-success" @onclick="SweetAlertSuccess">Тест SweetAlert Успех</button>
    <button class="btn btn-danger" @onclick="SweetAlertError">Тест SweetAlert Ошибка</button>
</div>*@

@*<button class="btn btn-danger" @onclick="()=>HandleDelete(objCat.ParentId, objCat.InsideId)">Удалить</button>*@

@code {

    private IEnumerable<ProcessResourcesVMDTO> processResourcesVMDTOList { get; set; } = new List<ProcessResourcesVMDTO>();
    IList<ProcessResourcesVMDTO> selectedPprocessResourcesVMDTO;
    //RadzenDataGrid<ProcessResourcesVMDTO> grid;
    public bool IsLoading { get; set; }
    public string DeleteMessage { get; set; } = "";
    public string DeleteMode { get; set; } = "Resource";
    private string DeleteInsideId { get; set; } = "";
    private string DeleteParentId { get; set; } = "";
    private Guid DeleteEquipmentId { get; set; } = Guid.Empty;
    private string DeleteEquipmentName { get; set; } = "";

    //-----------------------------------------------------


    /*    protected override void OnInitialized()
            {
            orders = dbContext.Orders.Include("Customer").Include("Employee").ToList();
        }  */

    void RowRender(RowRenderEventArgs<ProcessResourcesVMDTO> args)
    {
        args.Expandable = true;
    }

    void RowExpand(ProcessResourcesVMDTO processResourcesVMDTO)
    {
        if (processResourcesVMDTO.Equipments == null)
        {
            //processResourcesVMDTO.Equipments = await _processResourcesVMRepository.Get(processResourcesVMDTO.ProcessResources.ParentId, processResourcesVMDTO.ProcessResources.InsideId).Equipments;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadAllProcessResources();
            selectedPprocessResourcesVMDTO = processResourcesVMDTOList.Take(1).ToList();
            /*grid.ExpandRow(processResourcesVMDTOList.FirstOrDefault());*/
            // StateHasChanged();
        }

        //base.OnAfterRender(firstRender);
    }


    //----------------------------------------------------

    private async Task LoadAllProcessResources()
    {
        /* загурка данных */
        IsLoading = true;
        StateHasChanged();
        processResourcesVMDTOList = await _processResourcesVMRepository.GetAll();
        processResourcesVMDTOList.OrderBy(e => e.ProcessResources.InsideId).ThenBy(e => e.ProcessResources.ParentId);
        IsLoading = false;
        StateHasChanged();
    }

    private async Task ToastrSuccess(string messStr)
    {
        await _jsRuntime.ToastrSuccess(messStr);
    }

    private async Task ToastrError(string messStr)
    {
        await _jsRuntime.ToastrError(messStr);
    }

    private async Task SweetAlertSuccess(string messStr)
    {
        await _jsRuntime.InvokeVoidAsync("ShowSwal", "success", messStr);
    }

    private async Task SweetAlertError(string messStr)
    {
        await _jsRuntime.InvokeVoidAsync("ShowSwal", messStr);
    }


    private void HandleDelete(string parentId, string insideId)
    {
        DeleteInsideId = insideId;
        DeleteParentId = parentId;
        DeleteMessage = "Удалить ресурс " + insideId + " | " + parentId + " ?";
        DeleteMode = "Resource";
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private void HandleDeleteEquipment(string parentId, string insideId, Guid equipmentId, string s95name)
    {
        DeleteInsideId = insideId;
        DeleteParentId = parentId;
        DeleteEquipmentId = equipmentId;
        DeleteEquipmentName = s95name;
        DeleteMode = "Equipment";
        DeleteMessage = "Удалить оборудование '" + s95name + "' из ресурса " + insideId + " | " + parentId + " ?";
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }


    private async Task HandleAddEquipment(string parentId, string insideId)
    {


        IsLoading = true;
        if (String.IsNullOrEmpty(parentId) || String.IsNullOrEmpty(insideId))
        {
            ToastrError("Код завода или код склада пустой").GetAwaiter();
            IsLoading = false;
            return;
        }

        ProcessResourcesVMDTO resourceDTO = await _processResourcesVMRepository.Get(parentId, insideId);
        //.GetAwaiter().GetResult();

        if (resourceDTO == null)
        {
            ToastrError("Ресурс " + insideId + " | " + parentId + " не найден").GetAwaiter();
            IsLoading = false;
            return;
        }


        var dialogResult = await _dialogService.OpenAsync<ChooseEquipment>($"Добавить оборудование к ресурсу {insideId} | {parentId}",
            new Dictionary<string, object>() { { "Parameter1", parentId },
                                               { "Parameter2", insideId }},
            new DialogOptions() { Width = "650px", Height = "750px", ShowClose = true, Resizable = true, CloseDialogOnEsc = true });

        if (dialogResult != null)
        {
            var processResourcesVMDTOListTmp = processResourcesVMDTOList.ToList();
            processResourcesVMDTOListTmp.RemoveAll(e => (e.ProcessResources.ParentId == parentId && e.ProcessResources.InsideId == insideId));
            processResourcesVMDTOListTmp.Add(dialogResult);
            processResourcesVMDTOList = processResourcesVMDTOListTmp.OrderBy(e => e.ProcessResources.InsideId).ThenBy(e => e.ProcessResources.ParentId);
            IsLoading = false;
            this.StateHasChanged();
        }

        IsLoading = false;



        //InvokeAsync(StateHasChanged);

        //_navigationManager.NavigateTo("RPM/AddEquipmentToRecourse/" + parentId + "/" + insideId);
    }


    public async Task ConfirmDeleteEquipment_Click(bool isConfirmed)
    {
        IsLoading = true;
        // здесь код удаления
        /*if (isConfirmed && DeleteCategoryId != 0)*/
        if (isConfirmed)
        {
            /*await Task.Delay(5000);*/
            //delete
            /*await _categoryRepository.Delete(DeleteCategoryId);
            await LoadCategories(); */
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        DeleteMessage = "";
        IsLoading = false;
    }


    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        // здесь код удаления
        /*if (isConfirmed && DeleteCategoryId != 0)*/

        if (isConfirmed)
        {
            if (DeleteMode == "Resource")
            {
                if (String.IsNullOrEmpty(DeleteInsideId) || String.IsNullOrEmpty(DeleteParentId))
                {
                    await ToastrError("Код завода или код склада ресурса пусты!");
                }
                else
                {
                    int delCol = await _processResourcesVMRepository.Delete(DeleteParentId, DeleteInsideId);
                    if (delCol > 0)
                    {
                        await ToastrSuccess("Ресурс " + DeleteInsideId + " | " + DeleteParentId + " успешно удалён");
                    }
                    else
                    {
                        await ToastrError("Ресурс " + DeleteInsideId + " | " + DeleteParentId + " не удалось удалить. Возможно уже отсутствует в базе данных.");
                    }
                }
                await LoadAllProcessResources();
            }
            else if (DeleteMode == "Equipment")
            {

                if (String.IsNullOrEmpty(DeleteEquipmentId.ToString()))
                {
                    await ToastrError("Код оборудования пуст!");
                }
                else
                {
                    await _processResourcesVMRepository.DeleteEquipment(DeleteParentId, DeleteInsideId, DeleteEquipmentId);
                    await ToastrSuccess("Оборудование '" + DeleteEquipmentName + "' удалено из ресурса " + DeleteInsideId + " | " + DeleteParentId);
                }
                await LoadAllProcessResources();
            }
            else
            {
                await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
                DeleteMessage = "";
                IsLoading = false;

                await SweetAlertError("Не поддерживаемый режим удаления DeleteMode = '" + DeleteMode + "'!");
                return;
            }

        }
        await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        DeleteMessage = "";
        IsLoading = false;
    }


    protected async Task AddResource(MouseEventArgs args)
    {

        IsLoading = true;

        var dialogResult = await _dialogService.OpenAsync<AddEditProcessResources>("Добавить ресурс", null);

        if (dialogResult != null)
        {
            var processResourcesVMDTOListTmp = processResourcesVMDTOList.ToList();
            processResourcesVMDTOListTmp.Add(dialogResult);
            processResourcesVMDTOList = processResourcesVMDTOListTmp.OrderBy(e => e.ProcessResources.InsideId).ThenBy(e => e.ProcessResources.ParentId);
            IsLoading = false;
            this.StateHasChanged();
        }

        IsLoading = false;
    }


    protected async Task EditResource(DataGridRowMouseEventArgs<ProcessResourcesVMDTO> args)
    {
        var dialogResult = await _dialogService.OpenAsync<AddEditProcessResources>("Изменить ресурс ", new Dictionary<string, object>() { { "InsideId", args.Data.ProcessResources.InsideId }, { "ParentId", args.Data.ProcessResources.ParentId } });

        if (dialogResult != null)
        {
            var processResourcesVMDTOListTmp = processResourcesVMDTOList.ToList();
            processResourcesVMDTOListTmp.RemoveAll(e => (e.ProcessResources.ParentId == args.Data.ProcessResources.ParentId && e.ProcessResources.InsideId == args.Data.ProcessResources.InsideId));
            processResourcesVMDTOListTmp.Add(dialogResult);
            processResourcesVMDTOList = processResourcesVMDTOListTmp.OrderBy(e => e.ProcessResources.InsideId).ThenBy(e => e.ProcessResources.ParentId);
            IsLoading = false;
            this.StateHasChanged();
        }

        IsLoading = false;

    }

}
